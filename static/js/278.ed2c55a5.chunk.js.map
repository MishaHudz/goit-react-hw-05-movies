{"version":3,"file":"static/js/278.ed2c55a5.chunk.js","mappings":"oKAuBA,IApBA,YAAoD,IAA9BA,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,WAC7BC,GAAWC,EAAAA,EAAAA,MACjB,OACE,wBACGH,EAAcI,KAAI,YAA6B,IAA1BC,EAAyB,EAAzBA,GAAIC,EAAqB,EAArBA,eACxB,OACE,yBACE,SAAC,KAAD,CACEC,GAAE,UAAKN,EAAU,UAAMI,GAAN,iBAAuBA,IACxCG,MAAON,EAFT,SAIGI,KALID,EASZ,KAGN,C,0HCuCD,UAtDA,WACE,OAA8BI,EAAAA,EAAAA,MAA9B,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAgCC,EAAAA,EAAAA,UAAS,MAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAoCF,EAAAA,EAAAA,UAAS,IAA7C,eAAOG,EAAP,KAAmBC,EAAnB,KACA,GAAwBJ,EAAAA,EAAAA,UAAS,MAAjC,eAAOK,EAAP,KAAaC,EAAb,KAEMC,GAAWC,EAAAA,EAAAA,UAAQ,kBAAMV,EAAQW,IAAI,SAAlB,GAA6B,CAACX,IAqCvD,OAnCAY,EAAAA,EAAAA,YAAU,WACR,GAAKH,EAAL,CACA,IAAMI,EAAU,mCAAG,gHAEWC,EAAAA,EAAAA,IAAiBL,GAF5B,mBAEPM,EAFO,EAEPA,QACRX,EAAYW,GACZT,EAAc,IACdE,EAAQ,MACe,IAAnBO,EAAQC,OANG,uBAOP,IAAIC,MAAM,aAPH,0DAUfT,EAAQ,KAAMU,SAVC,0DAAH,qDAahBL,GAdqB,CAetB,GAAE,CAACJ,KAEJG,EAAAA,EAAAA,YAAU,WACRL,GAAQY,EAAAA,GAAAA,MAAYZ,EACrB,GAAE,CAACA,KAgBF,iCACE,kBAAMa,SAfW,SAAAC,GAGnB,GAFAA,EAAIC,kBAECjB,EAAY,OAAOc,EAAAA,GAAAA,KAAW,2BAGnClB,EADmC,KAAfI,EAAoB,CAAEkB,OAAQlB,GAAe,CAAC,EAEnE,EAQG,WACE,kBAAOmB,KAAK,OAAOC,SAPC,SAAAJ,GACxBf,EAAce,EAAIK,OAAOC,MAC1B,EAKqDA,MAAOtB,KACvD,4BAAQ,cAETF,IAAY,SAAC,IAAD,CAAYb,cAAea,EAAUZ,YAAY,MAGnE,C,+LCxDDqC,EAAAA,EAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAU,CACdC,QAAS,CACPC,cACE,+NAIC,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,uGACkBJ,EAAAA,EAAAA,GAAM,sBAAuBC,GAD/C,uBACGI,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAkCC,GAAlC,0FACkBP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,GAAUN,GAD5C,uBACGI,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA2BD,GAA3B,0FACkBP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,EAAX,YAA6BN,GADpD,uBACGI,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BF,GAA9B,0FACkBP,EAAAA,EAAAA,GAAM,UAAD,OAAWO,EAAX,YAA6BN,GADpD,uBACGI,EADH,EACGA,KADH,kBAGEA,GAHF,kEAMA,SAAenB,EAAtB,+CAAO,OAAP,oBAAO,WAAgCwB,GAAhC,0FACkBV,EAAAA,EAAAA,GAAM,uBAAD,OACHU,GACvBT,GAHG,uBACGI,EADH,EACGA,KADH,kBAMEA,GANF,kE","sources":["components/MoviesList/MoviesList.jsx","pages/Movies/Movies.jsx","services/movies-api.js"],"sourcesContent":["import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nfunction MoviesList({ moviesListArr, moviesPage }) {\n  const location = useLocation();\n  return (\n    <ul>\n      {moviesListArr.map(({ id, original_title }) => {\n        return (\n          <li key={id}>\n            <Link\n              to={`${moviesPage ? `${id}` : `movies/${id}`}`}\n              state={location}\n            >\n              {original_title}\n            </Link>\n          </li>\n        );\n      })}\n    </ul>\n  );\n}\n\nexport default MoviesList;\nMoviesList.propTypes = {\n  moviesListArr: PropTypes.arrayOf(PropTypes.object).isRequired,\n  moviesPage: PropTypes.bool,\n};\n","import { toast } from 'react-toastify';\nimport MoviesList from 'components/MoviesList/MoviesList';\nimport { useEffect, useMemo, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getFilmsBySearch } from 'services/movies-api';\n\nfunction MoviesPage() {\n  const [request, setRequest] = useSearchParams();\n  const [filmList, setFilmList] = useState(null);\n  const [inputState, setinputState] = useState('');\n  const [eror, setEror] = useState(null);\n\n  const filmName = useMemo(() => request.get('search'), [request]);\n\n  useEffect(() => {\n    if (!filmName) return;\n    const fetchFilms = async () => {\n      try {\n        const { results } = await getFilmsBySearch(filmName);\n        setFilmList(results);\n        setinputState('');\n        setEror(null);\n        if (results.length === 0) {\n          throw new Error('Not Found');\n        }\n      } catch (error) {\n        setEror(error.message);\n      }\n    };\n    fetchFilms();\n  }, [filmName]);\n\n  useEffect(() => {\n    eror && toast.error(eror);\n  }, [eror]);\n\n  const onFormSubmit = evt => {\n    evt.preventDefault();\n\n    if (!inputState) return toast.warn('Enter name of the film!');\n\n    const filmRequest = inputState !== '' ? { search: inputState } : {};\n    setRequest(filmRequest);\n  };\n\n  const updateQueryString = evt => {\n    setinputState(evt.target.value);\n  };\n\n  return (\n    <>\n      <form onSubmit={onFormSubmit}>\n        <input type=\"text\" onChange={updateQueryString} value={inputState} />\n        <button>Search</button>\n      </form>\n      {filmList && <MoviesList moviesListArr={filmList} moviesPage={true} />}\n    </>\n  );\n}\n\nexport default MoviesPage;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst options = {\n  headers: {\n    Authorization:\n      'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxYTUyYWExMWNlZTIwZWQ3MmNlODBlNTQ3ODk5ZTBiMiIsInN1YiI6IjY0N2UyNDE3Y2NkZTA0MDExOGFhYTZjNCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.ScOi38rHNRdHf25i9RPscLJw2wEJk6tQ_ks7iMhFAhw',\n  },\n};\n\nexport async function getMostPopularFilms() {\n  const { data } = await axios('/trending/movie/day', options);\n\n  return data;\n}\n\nexport async function getFilmDetailsById(filmId) {\n  const { data } = await axios(`/movie/${filmId}`, options);\n\n  return data;\n}\n\nexport async function getFilmCast(filmId) {\n  const { data } = await axios(`/movie/${filmId}/credits`, options);\n\n  return data;\n}\n\nexport async function getFilmRevirws(filmId) {\n  const { data } = await axios(`/movie/${filmId}/reviews`, options);\n\n  return data;\n}\n\nexport async function getFilmsBySearch(inputedSearchString) {\n  const { data } = await axios(\n    `/search/movie?query=${inputedSearchString}`,\n    options\n  );\n\n  return data;\n}\n"],"names":["moviesListArr","moviesPage","location","useLocation","map","id","original_title","to","state","useSearchParams","request","setRequest","useState","filmList","setFilmList","inputState","setinputState","eror","setEror","filmName","useMemo","get","useEffect","fetchFilms","getFilmsBySearch","results","length","Error","message","toast","onSubmit","evt","preventDefault","search","type","onChange","target","value","axios","options","headers","Authorization","getMostPopularFilms","data","getFilmDetailsById","filmId","getFilmCast","getFilmRevirws","inputedSearchString"],"sourceRoot":""}